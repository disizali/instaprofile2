{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs2/core-js/object/keys\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst Sequelize = require(\"sequelize\");\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || \"development\";\n\nconst config = require(__dirname + \"/../config/config.json\")[env];\n\nconst db = {};\nlet sequelize;\n\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nconst currentPath = path.resolve(process.env.PWD, \"models\");\nfs.readdirSync(currentPath).filter(file => {\n  return file.indexOf(\".\") !== 0 && file !== basename && file.slice(-3) === \".js\";\n}).forEach(file => {\n  const model = sequelize[\"import\"](path.join(currentPath, file));\n  db[model.name] = model;\n});\n\n_Object$keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\nsequelize.sync();\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\nmodule.exports = db;","map":{"version":3,"sources":["D:\\Projects\\NodeJs\\daliran\\models\\index.js"],"names":["fs","require","path","Sequelize","basename","__filename","env","process","NODE_ENV","config","__dirname","db","sequelize","use_env_variable","database","username","password","currentPath","resolve","PWD","readdirSync","filter","file","indexOf","slice","forEach","model","join","name","modelName","associate","sync","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,QAAQ,GAAGF,IAAI,CAACE,QAAL,CAAcC,UAAd,CAAjB;AACA,MAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;;AACA,MAAMC,MAAM,GAAGR,OAAO,CAACS,SAAS,GAAG,wBAAb,CAAP,CAA8CJ,GAA9C,CAAf;;AACA,MAAMK,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIH,MAAM,CAACI,gBAAX,EAA6B;AAC3BD,EAAAA,SAAS,GAAG,IAAIT,SAAJ,CAAcI,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACI,gBAAnB,CAAd,EAAoDJ,MAApD,CAAZ;AACD,CAFD,MAEO;AACLG,EAAAA,SAAS,GAAG,IAAIT,SAAJ,CACVM,MAAM,CAACK,QADG,EAEVL,MAAM,CAACM,QAFG,EAGVN,MAAM,CAACO,QAHG,EAIVP,MAJU,CAAZ;AAMD;;AAED,MAAMQ,WAAW,GAAGf,IAAI,CAACgB,OAAL,CAAaX,OAAO,CAACD,GAAR,CAAYa,GAAzB,EAA8B,QAA9B,CAApB;AACAnB,EAAE,CAACoB,WAAH,CAAeH,WAAf,EACGI,MADH,CACUC,IAAI,IAAI;AACd,SACEA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAtB,IAA2BD,IAAI,KAAKlB,QAApC,IAAgDkB,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KADrE;AAGD,CALH,EAMGC,OANH,CAMWH,IAAI,IAAI;AACf,QAAMI,KAAK,GAAGd,SAAS,CAAC,QAAD,CAAT,CAAoBV,IAAI,CAACyB,IAAL,CAAUV,WAAV,EAAuBK,IAAvB,CAApB,CAAd;AACAX,EAAAA,EAAE,CAACe,KAAK,CAACE,IAAP,CAAF,GAAiBF,KAAjB;AACD,CATH;;AAWA,aAAYf,EAAZ,EAAgBc,OAAhB,CAAwBI,SAAS,IAAI;AACnC,MAAIlB,EAAE,CAACkB,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BnB,IAAAA,EAAE,CAACkB,SAAD,CAAF,CAAcC,SAAd,CAAwBnB,EAAxB;AACD;AACF,CAJD;;AAMAC,SAAS,CAACmB,IAAV;AACApB,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACR,SAAH,GAAeA,SAAf;AAEA6B,MAAM,CAACC,OAAP,GAAiBtB,EAAjB","sourcesContent":["\"use strict\";\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst Sequelize = require(\"sequelize\");\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || \"development\";\nconst config = require(__dirname + \"/../config/config.json\")[env];\nconst db = {};\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(\n    config.database,\n    config.username,\n    config.password,\n    config\n  );\n}\n\nconst currentPath = path.resolve(process.env.PWD, \"models\");\nfs.readdirSync(currentPath)\n  .filter(file => {\n    return (\n      file.indexOf(\".\") !== 0 && file !== basename && file.slice(-3) === \".js\"\n    );\n  })\n  .forEach(file => {\n    const model = sequelize[\"import\"](path.join(currentPath, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\nsequelize.sync()\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nmodule.exports = db;\n"]},"metadata":{},"sourceType":"script"}